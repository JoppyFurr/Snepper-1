
Control Logic Inputs:

  [12]    - unused
  [4:11]  - Instruction
  [3]     - Flag (zero-flag if lsb=0, carry-flag if lsb=1)
  [0:2]   - Step

Control Logic Outputs:

  [12:15] - Data Bus Driver
            0 → none
            1 → r1
            2 → r2
            3 → r3
            4 → r4
            5 → ram
            6 → ah
            7 → al
            8 → add/sub
            8 → or
            9 → and
            a → xor
            b → none
            c → none
            d → none
            e → CFG
            f → I/O

  [8:11]  - Data Bus Consumer
            0 → none
            1 → r1
            2 → r2
            3 → r3
            4 → r4
            5 → ram
            6 → dh
            7 → dl
            8 → a1
            9 → a2
            a → IR
            b → none
            c → none
            d → none
            e → CFG
            f → I/O

  [6:7]   - Address Bus Driver
            0 → PC
            1 → DC
            2 → SP
            3 → DH/DL

  [3:5]   - Address Bus Consumer
            0 → none
            1 → PC
            2 → DC
            3 → SP
            4 → AH/AL
            5 → none
            6 → Sub
            7 → PC Count

  [0:2]   - Misc
            0 → none
            1 → PC Count
            2 → DC Count
            3 → SP Increase
            4 → SP Decrease
            5 → Clear Carry
            6 → none
            7 → Instruction complete

Assembler macros / instructions to implement:

        mov     dc, 0xXXXX
        mov     sp, 0xXXXX
        st      [0xXXXX], 0xXX
        halt
        reset
        rom-enable
        rom-disable
        named addresses for ram variables

Features that may be useful:
        mov     rX, ah/al
        mov sp, 0xXXXX
        and-cmp rX, rX
        I/O block transfer
        notification-register
        rshift
        invert
        zero-register

Instructions that could be dropped:
        One of add / addc
        One of sub / subc

256 instructions:
 00-1f  (32) : Move and load-immediate
 20-5f  (64) : Memory instructions
 60-6f  (16) : Jump instructions
 70-7f  (16) : I/O instructions
 80-ff (128) : ALU instructions


--------

 00     mov     rX, { rX / 0xXX }
 10-13  unused
 14     mov     dh, rX
 18     mov     dl, rX
 1c     mov     hl, 0xXXXX
 1d     mov     dc, hl
 1e     mov     sp, hl
 1f     unused

 20     ld      rX, [dh, rX]
 30     st      [dh, rX], rX
 40     ld      rX, [0xXXXX]
 44     st      [0xXXXX], rX
 48     ld      rX, [dc++]
 4c     st      [dc++], rX
 50     pop     rX
 54     push    rX
 58-5f  unused

 60     jmp     hl
 61     unused
 62     jmp-z   hl
 63     jmp-c   hl
 64     jmp-nz  hl
 65     jmp-nc  hl
 66     jmp     0xXXXX
 67     unused
 68     jmp-z   0xXXXX
 69     jmp-c   0xXXXX
 6a     jmp-nz  0xXXXX
 6b     jmp-nc  0xXXXX
 6c     call    hl
 6d     call    0xXXXX
 6e     ret
 6f     unused

 70     input   rX
 74     output  rX
 78     input   [dc++]
 79     output  [dc++]
 7a
 7b
 7c
 7d
 7e     cfg-set 0xXX
 7f     cfg-clr 0xXX

 80     add     rX, { rX / 0xXX }
 90     add-c   rX, { rX / 0xXX }
 a0     sub     rX, { rX / 0xXX }
 b0     sub-c   rX, { rX / 0xXX }
 c0     and     rX, { rX / 0xXX }
 d0     or      rX, { rX / 0xXX }
 e0     xor     rX, { rX / 0xXX }
 f0     cmp     rX, { rX / 0xXX }
--------

Configuration register:
 0 - I/O Device bit 0
 1 - I/O Device bit 1
 2 - I/O Device bit 2
 3 - I/O device bit 3
 4 - unused
 5 - ROM/RAM
 6 - Halt
 7 - Reset

--------

 Instruction-set improvements:
 Test by calculating and bcd-converting 10 Fibonacci numbers
 1451 - Starting point
 1401 - Add a 20s loop for BCD conversion
 1326 - add immediate
 1281 - sub immediate
 1038 - immediate support for remaining ALU instructions
